{"name": "test_printCarNamesandPrices[chrome-Honda-Honda Cars]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[3]/div[1]/div[2]/div[1]/h1[1]\"}\n  (Session info: chrome=106.0.5249.119)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x009C1ED3+2236115]\n\tOrdinal0 [0x009592F1+1807089]\n\tOrdinal0 [0x008666FD+812797]\n\tOrdinal0 [0x008955DF+1005023]\n\tOrdinal0 [0x008957CB+1005515]\n\tOrdinal0 [0x008C7632+1209906]\n\tOrdinal0 [0x008B1AD4+1120980]\n\tOrdinal0 [0x008C59E2+1202658]\n\tOrdinal0 [0x008B18A6+1120422]\n\tOrdinal0 [0x0088A73D+960317]\n\tOrdinal0 [0x0088B71F+964383]\n\tGetHandleVerifier [0x00C6E7E2+2743074]\n\tGetHandleVerifier [0x00C608D4+2685972]\n\tGetHandleVerifier [0x00A52BAA+532202]\n\tGetHandleVerifier [0x00A51990+527568]\n\tOrdinal0 [0x0096080C+1837068]\n\tOrdinal0 [0x00964CD8+1854680]\n\tOrdinal0 [0x00964DC5+1854917]\n\tOrdinal0 [0x0096ED64+1895780]\n\tBaseThreadInitThunk [0x75B17BA9+25]\n\tRtlInitializeExceptionChain [0x7747BB3B+107]\n\tRtlClearBits [0x7747BABF+191]", "trace": "self = <Testcases.test_carwale.Test_CarWale object at 0x0000013C15E44BE0>\ncarBrand = 'Honda', carTitle = 'Honda Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\",\n                             dataProvider.get_data(\"NewCarTest\"))\n    def test_printCarNamesandPrices(self, carBrand, carTitle):\n        log.logger.info(\"******Inside print Cars Names and Prices Test*******\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n        print(\"car Brand is: \", carBrand)\n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()\n            print((\"Car title is: \" + title).encode('utf8'))\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPries()\n    \n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n            title = car.getCarTitle()\n            print((\"Car title is: \" + title).encode('utf8'))\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPries()\n    \n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n            title = car.getCarTitle()\n            print((\"Car title is: \" + title).encode('utf8'))\n            assert title == carTitle, \"Not on the correct page as title is not matching\"\n            car.getCarNameAndPries()\n    \n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n>           title = car.getCarTitle()\n\ntest_carwale.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\CarBase.py:12: in getCarTitle\n    return self.driver.find_element(By.XPATH, configReader.readConfig(\"locators\",\"cartitle_XPATH\")).text\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:856: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000013C15EDA830>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x75B17BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7747BB3B+107]\\\\n\\\\tRtlClearBits [0x7747BABF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[3]/div[1]/div[2]/div[1]/h1[1]\"}\nE         (Session info: chrome=106.0.5249.119)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x009C1ED3+2236115]\nE       \tOrdinal0 [0x009592F1+1807089]\nE       \tOrdinal0 [0x008666FD+812797]\nE       \tOrdinal0 [0x008955DF+1005023]\nE       \tOrdinal0 [0x008957CB+1005515]\nE       \tOrdinal0 [0x008C7632+1209906]\nE       \tOrdinal0 [0x008B1AD4+1120980]\nE       \tOrdinal0 [0x008C59E2+1202658]\nE       \tOrdinal0 [0x008B18A6+1120422]\nE       \tOrdinal0 [0x0088A73D+960317]\nE       \tOrdinal0 [0x0088B71F+964383]\nE       \tGetHandleVerifier [0x00C6E7E2+2743074]\nE       \tGetHandleVerifier [0x00C608D4+2685972]\nE       \tGetHandleVerifier [0x00A52BAA+532202]\nE       \tGetHandleVerifier [0x00A51990+527568]\nE       \tOrdinal0 [0x0096080C+1837068]\nE       \tOrdinal0 [0x00964CD8+1854680]\nE       \tOrdinal0 [0x00964DC5+1854917]\nE       \tOrdinal0 [0x0096ED64+1895780]\nE       \tBaseThreadInitThunk [0x75B17BA9+25]\nE       \tRtlInitializeExceptionChain [0x7747BB3B+107]\nE       \tRtlClearBits [0x7747BABF+191]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: NoSuchElementException"}, "attachments": [{"name": "log", "source": "52c0b185-b0ca-4728-b3e3-15d9822373f4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}, {"name": "carBrand", "value": "'Honda'"}, {"name": "carTitle", "value": "'Honda Cars'"}], "start": 1667368548449, "stop": 1667368569180, "uuid": "15621273-5ece-4575-97cb-48fcbffc7aa4", "historyId": "80c55da298cee00f3557c2606586a827", "testCaseId": "27419eff2892b7f9e62c746340063c1d", "fullName": "test_carwale.Test_CarWale#test_printCarNamesandPrices", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('get_browser')"}, {"name": "suite", "value": "test_carwale"}, {"name": "subSuite", "value": "Test_CarWale"}, {"name": "host", "value": "Meghanath"}, {"name": "thread", "value": "1168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_carwale"}]}